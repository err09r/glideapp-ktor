openapi: "3.0.3"
info:
  title: "GlideApp API"
  description: "API for GlideApp client. Contains both HTTP and WebSocket routes."
  version: "0.1.2"
servers:
  - url: "http://127.0.0.1"
paths:
  /: { }
  /api/config:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/AppConfigDto"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
  /api/login:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Function1_? super AuthResponse"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "401":
          description: "Unauthorized"
          content:
            text/plain:
              schema:
                type: "string"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
  /api/map:
    get:
      description: ""
      parameters:
        - name: "Connection"
          in: "header"
          required: true
          description: "Websocket Connection parameter"
          schema:
            type: "string"
        - name: "Upgrade"
          in: "header"
          required: true
          description: "Websocket Upgrade parameter"
          schema:
            type: "string"
        - name: "Sec-WebSocket-Key"
          in: "header"
          required: true
          description: "Websocket Sec-WebSocket-Key parameter"
          schema:
            type: "string"
      responses:
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: "string"
            Upgrade:
              required: true
              schema:
                type: "string"
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: "string"
  /api/register:
    post:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/Function1_? super AuthResponse"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "409":
          description: "Conflict"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
  /api/ride:
    get:
      description: ""
      parameters:
        - name: "Connection"
          in: "header"
          required: true
          description: "Websocket Connection parameter"
          schema:
            type: "string"
        - name: "Upgrade"
          in: "header"
          required: true
          description: "Websocket Upgrade parameter"
          schema:
            type: "string"
        - name: "Sec-WebSocket-Key"
          in: "header"
          required: true
          description: "Websocket Sec-WebSocket-Key parameter"
          schema:
            type: "string"
      responses:
        "101":
          description: "Switching Protocols"
          headers:
            Connection:
              required: true
              schema:
                type: "string"
            Upgrade:
              required: true
              schema:
                type: "string"
            Sec-WebSocket-Accept:
              required: true
              schema:
                type: "string"
  /api/ride/{id}:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/RideDto"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
  /api/transaction:
    get:
      description: ""
      parameters:
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "string"
        - name: "limit"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TransactionDto"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
    post:
      description: ""
      responses:
        "201":
          description: "Created"
          content:
            'application/json':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
  /api/user/{id}:
    get:
      description: ""
      parameters:
        - name: "id"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          description: "Bad Request"
          content:
            text/plain:
              schema:
                type: "string"
        "404":
          description: "Not Found"
          content:
            text/plain:
              schema:
                type: "string"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
  /api/zone:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            'application/json':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/ZoneDto"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
components:
  schemas:
    AppConfigDto:
      type: "object"
      properties:
        unlockDistance:
          type: "number"
          format: "double"
    Function1:
      type: "object"
      properties: { }
    Function1_? super AuthResponse:
      type: "object"
    LocalDateTime:
      type: "object"
      properties: { }
    Coordinates:
      type: "object"
      properties:
        latitude:
          type: "number"
          format: "double"
        longitude:
          type: "number"
          format: "double"
    RideDto:
      type: "object"
      properties:
        id:
          type: "string"
        key:
          type: "integer"
          format: "int32"
        startAddress:
          type: "string"
        finishAddress:
          type: "string"
        startDateTime:
          $ref: "#/components/schemas/LocalDateTime"
        finishDateTime:
          $ref: "#/components/schemas/LocalDateTime"
        route:
          type: "array"
          items:
            $ref: "#/components/schemas/Coordinates"
        distance:
          type: "number"
          format: "double"
        averageSpeed:
          type: "number"
          format: "double"
    TransactionDto:
      type: "object"
      properties:
        id:
          type: "string"
        key:
          type: "integer"
          format: "int32"
        amount:
          type: "number"
          format: "double"
        type:
          type: "string"
          enum:
            - "TopUp"
            - "Ride"
            - "StartBonus"
            - "Voucher"
            - "Penalty"
        dateTime:
          $ref: "#/components/schemas/LocalDateTime"
    UserDto:
      type: "object"
      properties:
        id:
          type: "string"
        username:
          type: "string"
        firstName:
          type: "string"
        lastName:
          type: "string"
        totalDistance:
          type: "number"
          format: "double"
        totalRides:
          type: "integer"
          format: "int32"
        balance:
          type: "number"
          format: "double"
    ZoneDto:
      type: "object"
      properties:
        id:
          type: "string"
        code:
          type: "integer"
          format: "int32"
        title:
          type: "string"
        type:
          type: "string"
          enum:
            - "Riding"
            - "NoParking"
        coordinates:
          type: "array"
          items:
            $ref: "#/components/schemas/Coordinates"
